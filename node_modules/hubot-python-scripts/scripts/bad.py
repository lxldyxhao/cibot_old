# coding=utf-8
from scripts.hubot_script import *
import pymysql
import json
import traceback
import logging
import re

# 通过下面的方式进行简单配置输出方式与日志级别
logging.basicConfig(filename='logger2.log', level=logging.INFO,
                    format="%(asctime)s %(filename)s %(lineno)d %(message)s",
                    datefmt="%a %d %b %Y %H:%M:%S")


# from   import python_dispatch


class Bad(HubotScript):
  @hear(u'^不满意解答([0-9]+)问题([0-9]+)$')  # 1.监听对话
  def comment(self, message, matches):
    config = {
      'host': 'localhost',
      'port': 3306,
      'user': 'root',
      'password': 'password',
      'db': 'hubot',
      'charset': 'utf8mb4',
      'cursorclass': pymysql.cursors.DictCursor,
    }
    conn = pymysql.connect(**config)
    cursor = conn.cursor()

    try:
      # 判断问题是不是他发的,并且 还是未解决
      value = (int(matches[1]))
      cursor.execute('select request from issue where id = %s and status = 0', value)
      conn.commit()
      result = cursor.fetchone()
      if result is not None:
        the_issue_user_nickname = result['request']
        # 查真正题主的  UserName
        value = (the_issue_user_nickname)
        cursor.execute('select UserName from contact where NickName = %s', value)
        conn.commit()
        result = cursor.fetchone()
        if result is not None:
          the_issue_user_username = result['UserName']
          if the_issue_user_username == message['user']['name']:
            # 真的是他发送的
            logging.error('#1')
            solution_id = int(matches[0])
            issue_id = int(matches[1])

            # 3.修改解决方案状态为 1 未被接受
            value = [solution_id]
            cursor.execute('update solution set status = 1 where id = %s', value)
            conn.commit()

            # 4.2 查回答的答主
            value = [solution_id]
            cursor.execute('select response from solution where id = %s', value)
            conn.commit()
            result = cursor.fetchone()
            if result is not None:
              logging.error('#2')
              response = result['response']
              value = [response]
              cursor.execute('select UserName from contact where NickName = %s', value)
              conn.commit()
              result = cursor.fetchone()
              if result is not None:
                logging.error('#3')
                answer_username = result['UserName']
                broadcast = "非常感谢您的回答，但您的答案没有被提问者接受呢~"
                msg1 = {"type": "hear",
                        "message": broadcast,
                        "user": {"room": "", "name": answer_username}
                        }

                # 退款
                # 获取当时悬赏的金额数
                value = [issue_id]
                cursor.execute('select bonus from issue where id = %s', value)
                conn.commit()
                result = cursor.fetchone()
                if result is not None:
                  logging.error('#4')
                  reward_bonus = float(result['bonus'])

                  # 获取题主当前的自由金额数
                  value = [message['user']['name']]
                  cursor.execute('select NickName,freebonus from contact where UserName = %s', value)
                  conn.commit()
                  result = cursor.fetchone()
                  if result is not None:
                    logging.error('#5')
                    remainingFreeBonus = float(result['freebonus'])
                    nickname = result['NickName']

                    # 更新题主的自由金额数
                    remainingFreeBonus += reward_bonus
                    value = [remainingFreeBonus, message['user']['name']]
                    cursor.execute('update contact set freebonus = %s where UserName = %s', value)
                    conn.commit()
                    logging.error('#5000')
                    # 查看当前余额
                    value = [message['user']['name']]
                    cursor.execute('select Bonus,NickName,freebonus from contact where UserName = %s', value)
                    conn.commit()
                    result = cursor.fetchone()
                    if result is not None:
                      logging.error('#50000')
                      remainingBonus = float(result['Bonus'])
                      logging.error('#50001')
                      remainingFreeBonus = float(result['freebonus'])
                      logging.error('#50002')
                      totalBonus = remainingBonus + remainingFreeBonus


                      logging.error('#5001')
                      # logging.error('remainingBonus:' + result['Bonus'] + 'remainingFreeBonus:' + result[
                      #   'freebonus'] + "total:" + total_remain_bonus)
                      message['message'] = u"小智已经通知回答者：" + response + u"，" + u"并且退回您的红包：" + str(
                        reward_bonus) + u"元，" \
                                        u"当前您的资产为：" + \
                                     str(totalBonus)

                    logging.error('#5002')

                    content = json.dumps(message)
                    content1 = json.dumps(msg1)
                    logging.error('#7')
                    return "2&&" + content + "&&" + content1


          else:
            logging.error('#11')
            message['message'] = "抱歉，这个问题不是由您发起的~"
            content = json.dumps(message)
            return "-1&&" + content
        else:
          logging.error('#11')
          message['message'] = "Invalid contact!"
          content = json.dumps(message)
          return "-1&&" + content
      else:
        logging.error('#11')
        message['message'] = "抱歉，问题已经关闭了哦~\n有没有兴趣问小智一个问题呢？"
        content = json.dumps(message)
        return "-1&&" + content

    except:
      import traceback

      traceback.print_exc()
      # 发生错误时会滚
      conn.rollback()

    finally:  # 关闭游标连接
      cursor.close()
      # 关闭数据库连接
      conn.close()
