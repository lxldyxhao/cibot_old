# coding=utf-8
from scripts.hubot_script import *
import pymysql
import json
import traceback
import logging
import re

# 通过下面的方式进行简单配置输出方式与日志级别
logging.basicConfig(filename='logger2.log', level=logging.INFO,
                    format="%(asctime)s %(filename)s %(lineno)d %(message)s",
                    datefmt="%a %d %b %Y %H:%M:%S")


# from   import python_dispatch


class Good(HubotScript):
  @hear(u'^满意解答([0-9]+)问题([0-9]+)$')  # 1.监听对话
  def comment(self, message, matches):
    config = {
      'host': 'localhost',
      'port': 3306,
      'user': 'root',
      'password': 'password',
      'db': 'hubot',
      'charset': 'utf8mb4',
      'cursorclass': pymysql.cursors.DictCursor,
    }
    conn = pymysql.connect(**config)
    cursor = conn.cursor()

    try:
      # 判断问题是不是他发的,并且 还是未解决
      value = (int(matches[1]))
      cursor.execute('select request from issue where id = %s and status = 0', value)
      conn.commit()
      result = cursor.fetchone()
      if result is not None:
        the_issue_user_nickname = result['request']
        # 查真正题主的  UserName
        value = (the_issue_user_nickname)
        cursor.execute('select UserName from contact where NickName = %s', value)
        conn.commit()
        result = cursor.fetchone()
        if result is not None:
          the_issue_user_username = result['UserName']
          if the_issue_user_username == message['user']['name']:
            # 真的是他发送的
            logging.error('#1')

            solution_id = int(matches[0])
            issue_id = int(matches[1])
            # 2.修改问题状态 为 1 回答满意
            value = [issue_id]
            cursor.execute('update issue set status = 1 where id = %s', value)
            conn.commit()
            # 3.修改解决方案状态为 2 回答被接受
            value = [solution_id]
            cursor.execute('update solution set status = 2 where id = %s', value)
            conn.commit()

            # 4.回复答主,发红包
            # 4.1查找问题的悬赏积分,问题的内容
            value = [issue_id]
            cursor.execute('select bonus,content from issue where id = %s', value)
            conn.commit()
            result = cursor.fetchone()
            if result is not None:
              logging.error('#2')
              bonus = float(result['bonus'])
              logging.error('#2.1')
              issue_content = result['content']
              logging.error('#2.2')

              # 修改所有相同问题的最佳解决方案ID  为 这个 solution id
              value = [solution_id, issue_content]
              cursor.execute('update issue set best_solution_id = %s where content = %s', value)
              logging.error('#2.3')
              conn.commit()

              # 4.2 查回答的答主
              value = [solution_id]
              cursor.execute('select response from solution where id = %s', value)
              logging.error('#2.4')
              conn.commit()
              result = cursor.fetchone()
              if result is not None:
                logging.error('#3')
                nickname = result['response']
                value = [nickname]
                cursor.execute('select UserName from contact where NickName = %s', value)
                logging.error('#3.1')
                conn.commit()
                result = cursor.fetchone()
                if result is not None:
                  logging.error('#4')
                  response = result['UserName']

                  # 4.3 更改双方的 积分
                  try:
                    cursor.execute('select freebonus from contact where UserName = %s', [response])  # 答主
                    result = cursor.fetchone()
                    if result is not None:
                      logging.error('#5')
                      answer_bonus = float(result['freebonus'])
                      answer_bonus += bonus
                      cursor.execute('update contact set freebonus =  %s where UserName = %s',
                                     [answer_bonus, response])  # 答主


                  except Exception as e:
                    conn.rollback()  # 事务回滚
                    import traceback
                    traceback.print_exc()
                    print('sql error', e)
                    logging.error('#6')
                  else:
                    logging.error('#7')
                    conn.commit()  # 事务提交
                    # 4.4 查看是否确实到账,通知答主
                    value = [response]
                    cursor.execute('select Bonus,freebonus from contact where UserName = %s', value)
                    conn.commit()
                    result = cursor.fetchone()
                    # print('###', "111")
                    if result is not None:
                      logging.error('#8')
                      # print('###', "222")
                      remaining_bonus = float(result['Bonus'])
                      remaining_free_bonus = float(result['freebonus'])
                      total_remaining = remaining_bonus + remaining_free_bonus

                      logging.error("#8.2")
                      try:
                        broadcast = str("谢谢您的解答，提问者发给您一个红包：") + str(
                          bonus) + str("元，您当前资产为：") + str(total_remaining)
                      except:
                        logging.error('#8.5')
                      logging.error("#8.6")
                      msg1 = {"type": "hear",
                              "message": broadcast,
                              "user": {"room": "", "name": response}
                              }
                      logging.error("#8.8")

                      try:
                        message['message'] = str("谢谢您~已经将红包发给回答者")# + str(nickname)
                        # print('###', "000")
                      except:
                        logging.error("#8.88")
                      logging.error("#8.9")
                      content = json.dumps(message)
                      content1 = json.dumps(msg1)
                      logging.error('#9')
                      return "2&&" + content + "&&" + content1


                      # else:  # 用户自己提问,自己回答
                      #   return "-1&&" + "You can not play with yourself !!!"
          else:
            logging.error('#11')
            # message['message'] = "The issue wasn't post by you, you don't have the permission!"
            message['message'] = "抱歉，这个问题不是由您发起的~"
            content = json.dumps(message)
            return "-1&&" + content
        else:
          logging.error('#11')
          message['message'] = "Invalid contact!"
          content = json.dumps(message)
          return "-1&&" + content
      else:
        logging.error('#11')
        #message['message'] = "The issue is timeout or closed!"
        message['message'] = "抱歉，问题已经关闭了哦~\n有没有兴趣问小智一个问题呢？"
        content = json.dumps(message)
        return "-1&&" + content
    except:
      import traceback

      traceback.print_exc()
      # 发生错误时会滚
      conn.rollback()

    finally:  # 关闭游标连接
      cursor.close()
      # 关闭数据库连接
      conn.close()
