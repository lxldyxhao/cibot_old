# coding=utf-8
from scripts.hubot_script import *
import pymysql
import json
import traceback
import logging
import re

# 通过下面的方式进行简单配置输出方式与日志级别
logging.basicConfig(filename='logger2.log', level=logging.INFO,
                    format="%(asctime) s%(filename)s %(lineno)d %(message)s",
                    datefmt="%a %d %b %Y %H:%M:%S")


# from   import python_dispatch


class NotHappy(HubotScript):
  @hear(u'^不满意$')  # 1.监听对话
  def say(self, message, matches):
    config = {
      'host': 'localhost',
      'port': 3306,
      'user': 'root',
      'password': 'password',
      'db': 'hubot',
      'charset': 'utf8mb4',
      'cursorclass': pymysql.cursors.DictCursor,
    }
    conn = pymysql.connect(**config)
    cursor = conn.cursor()
    logging.error('#1')
    try:
      # 3.1 查找该用户的剩余积分,问题缓冲区
      value = [message['user']['name']]
      cursor.execute('select Bonus,NickName,issuebuffer,freebonus from contact where UserName = %s', value)
      conn.commit()
      result = cursor.fetchone()
      if result is not None:
        logging.error('#2')
        remainingBonus = float(result['Bonus'])
        remainingFreeBonus = float(result['freebonus'])
        totalBonus = remainingBonus + remainingFreeBonus
        nickname = result['NickName']
        issue_buffer = result['issuebuffer']

        if issue_buffer != "":
          logging.error('#3')
          search = re.search(u'^提问：([\s\S]+)#红包：([0-9]+)#$', issue_buffer, re.IGNORECASE)
          if search:
            logging.error('#4')
            my_matches = search.groups()
            bonus = float(my_matches[1])

            msg = self.bonus_not_enough(totalBonus, bonus, message)
            if msg == 1:
              logging.error('#5')
              back = self.publish_issue(bonus, conn, cursor, my_matches, message, nickname, remainingBonus,
                                        remainingFreeBonus)
              if back == 1 or back == 2:
                logging.error('#500')
                pass
              else:
                logging.error('#6')
                return back

            elif msg == 2:
              logging.error('#501')
              pass
            else:
              logging.error('#7')
              return msg

          else:
            #message[
            #  'message'] = "You don't have open issue,please send you issue,right format:issue:[your issue]##bonus:[your bonus]"
            message[
              'message'] = "您还没有提出问题，正确的提问格式：\n提问：[问题内容]#红包：[金额]#"

            content = json.dumps(message)
            logging.error('#8')
            return "-1&&" + content
        else:
          message[
            'message'] = "您还没有提出问题，正确的提问格式：\n提问：[问题内容]#红包：[金额]#"
          content = json.dumps(message)
          logging.error('#9')
          return "-1&&" + content



    except:
      import traceback
      traceback.print_exc()
      # 发生错误时会滚
      conn.rollback()

    finally:  # 关闭游标连接
      cursor.close()
      # 关闭数据库连接
      conn.close()

  def bonus_not_enough(self, totalBonus, bonus, message):
    try:
      logging.error('#10')
      if totalBonus < bonus:
        logging.error('#11')
        # 提示用户
        # message['message'] = "Your remaining bonus is " + str(totalBonus) + ", which is less than your reward " \
        #                                                                     "bonus " + str(
        #   bonus) + ",so issue posting " \
        #            "failed! "
        message['message'] = u"抱歉，您剩余的资产为：" + str(totalBonus) + u"元，小于您发送红包的" \
                                                                u"数量：" + str(
          bonus) + u"元，问题发起失败！"
        content = json.dumps(message)
        logging.error('#11')
        return "-1&&" + content
      return 1
    except Exception, e:
      traceback.print_exc()
      logging.error('#12')
      return 2

      # 发布问题

      # 发布问题

  def publish_issue(self, bonus, conn, cursor, matches, message, nickname, remainingBonus,
                    remainingFreeBonus):
    try:
      # 扣钱
      tmp = bonus - remainingBonus
      if tmp > 0:
        logging.error('#100')
        # 说明赠送的那部分不够
        remainingFreeBonus -= tmp
        remainingBonus = 0
      else:
        logging.error('#101')
        remainingBonus -= bonus

      # logging.error('remainingBonus:' + remainingBonus + 'remainingFreeBonus:' + remainingFreeBonus)
      # 更新剩余金额数
      value = [remainingBonus, remainingFreeBonus, nickname]
      cursor.execute('update contact set Bonus = %s , freebonus = %s where NickName = %s', value)
      logging.error('#102')
      conn.commit()

      # 发布问题
      value = [nickname, matches[0], bonus]
      cursor.execute('INSERT INTO issue (request,content,bonus) VALUES (%s,%s,%s)', value)
      logging.error('#103')
      conn.commit()

      new_id = str(cursor.lastrowid)
      # 4.相关度排序筛选出三个人，如果问题语法不合适就默认[u"梁旭磊", u"图灵机器人", u"贤二机器僧"]
      recommend_list = ["梁旭磊", "图灵机器人", "贤二机器僧"]
      recommend_names = []  # 存储推荐用户的ID(UserName)
      # 得到推荐用户的UserName
      for i in range(recommend_list.__len__()):
        logging.error('#104')
        cursor.execute('SELECT UserName FROM contact WHERE NickName = %s', [recommend_list[i]])
        conn.commit()
        username = cursor.fetchone()['UserName']
        recommend_names.insert(i, username)

      # 5.广播给推荐列表里的用户
      # if nickname is not None:
      logging.error('#105')
      # broadcast = "issue #" + new_id + ":" + matches[
      #   0] + "\nPoster " + nickname + "\nPlease think it over and try to solve, if your answer is accepted,you can get " + str(
      #   bonus) + " reward bonus\n\n" \
      #            "Right answer form is below:\n" \
      #            "solution for issue #" + new_id + ":[your answer here]"

      broadcast = u"【红包问题】#" + new_id + u" 提问者：" + nickname + u"\n" + matches[
        0] + u"\n\n您能告诉我这个问题的答案吗？\n" \
             u"正确的回复格式：\n" \
             u"解答" + new_id + u"：[您的解答]"

      logging.error('#106')
      # 回复题主
      # message['message'] = "temp take bonus $" + str(
      #   bonus) + ",have send to 3 people for help, if you don't happy with all solutions,we will refund!"

      message['message'] = u"小智已经收到您的红包问题，包含" + str(
        bonus) + u"元，正在帮您请教最有可能知道答案的朋友们~\n"
      content = json.dumps(message)
      logging.error('#107')
      data = "0&&" + content
      for j in range(recommend_names.__len__()):
        logging.error('#108')
        # 转发给第一个人
        msg1 = {"type": "hear",
                "message": broadcast,
                "user": {"room": "", "name": str(recommend_names[j])}
                }
        content1 = json.dumps(msg1)
        data += "&&" + content1
        logging.error('#109')
      return data
      # return 1
    except Exception, e:
      traceback.print_exc()
      logging.error(str(e))
      return 2
