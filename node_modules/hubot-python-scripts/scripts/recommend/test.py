#encoding:utf-8
import pymysql
import jieba.posseg as pseg
import gensim
import heapq
import warnings
warnings.filterwarnings("ignore")

class Test(Object):

  def del_repeat0(list):
    for x in list:
      while list.count(x)>1:
        del list[list.index(x)]
    return list

  def recommend_persons0():
    config = {
      'host': 'localhost',
      'port': 3306,
      'user': 'root',
      'password': 'password',
      'db': 'hubot',
      'charset': 'utf8mb4',
      'cursorclass': pymysql.cursors.DictCursor,
    }
    conn = pymysql.connect(**config)
    cursor = conn.cursor()

    cursor.execute('SELECT NickName,Tags FROM `contact`')
    conn.commit()
    result = cursor.fetchall()

    test_model = gensim.models.Word2Vec.load_word2vec_format('vectors.bin', binary=True)

    # while(True):
    #textin = raw_input('please input a question!\n')
    textin = u"无人机失控了怎么办"
    words = pseg.cut(textin)
    for w in words:
       print w.word,w.flag

    flag = 0
    heap = []  # 用于存储排序结果，不过是逆序的，为了便于去重

    for w in words:
      # print w.word,w.flag
      if ((w.flag==u'n')|(w.flag==u'nr')|(w.flag==u'ns')|(w.flag==u'nt')|(w.flag==u'nz')|(w.flag==u'Ng')|(w.flag==u'j')):
        flag = 1
        for user in result:
          # print user
          maxsim = 0
          tags = user['Tags'].split(' ')
          for tag in tags:
            # print "word,tag:",w.word,tag
            if tag:
              try :
                similar = test_model.similarity(w.word, tag)
              except:
                import traceback
                traceback.print_exc()
              if (similar > maxsim):
                maxsim = similar
                #target = user
          heapq.heappush(heap,(maxsim,user))

    if flag == 1:
      recommend_list = [heapq.heappop(heap)[1]['NickName'] for i in range(len(heap))]

      for i in recommend_list:
        print u' - ',i
      print
      # list去重
      del_repeat(recommend_list)

      # 获得最终的正向列表
      for i in recommend_list[::-1]:
        print u' - ',i
        # print u" - ",heapq.heappop(heap)[1]['NickName']
    else:
      print("无法识别的问题")

    cursor.close()
    conn.close()

  def test_heap():
    import heapq
    heap = []
    # 向推中插入元组
    heapq.heappush(heap, (10, u'{联系李磊}'))
    heapq.heappush(heap, (1, 'hahaha'))
    heapq.heappush(heap, (10 / 2, 'fdafdave'))
    while heap:
      print heapq.heappop(heap),
    print


  def del_repeat(list):
    for x in list:
      while list.count(x) > 1:
        del list[list.index(x)]
    return list


  def recommend_persons(textin):
    config = {
      'host': 'localhost',
      'port': 3306,
      'user': 'root',
      'password': 'password',
      'db': 'hubot',
      'charset': 'utf8mb4',
      'cursorclass': pymysql.cursors.DictCursor,
    }
    conn = pymysql.connect(**config)
    cursor = conn.cursor()

    cursor.execute('SELECT NickName,Tags FROM contact')
    conn.commit()
    result = cursor.fetchall()

    test_model = gensim.models.Word2Vec.load_word2vec_format('vectors.bin', binary=True)

    words = pseg.cut(textin)
    flag = 0
    heap = []  # 用于存储排序结果，不过是逆序的，为了便于去重

    for w in words:
      # print w.word,w.flag
      if ((w.flag == u'l' )| (w.flag == u'v') | (w.flag == u'n') | (w.flag == u'nr') | (w.flag == u'ns') | (
        w.flag == u'nt') | (w.flag == u'nz') | (
          w.flag == u'Ng') | (w.flag == u'j')):
        flag = 1
        for user in result:
          # print user
          maxsim = 0
          tags = user['Tags'].split(' ')
          for tag in tags:
            # print "word,tag:",w.word,tag
            if tag:
              try:
                similar = test_model.similarity(w.word, tag)
              except:
                continue
              if (similar > maxsim):
                maxsim = similar
                # target = user
          heapq.heappush(heap, (maxsim, user))
    if flag == 1:
      recommend_list = [heapq.heappop(heap)[1]['NickName'] for i in range(len(heap))]
      # list去重
      del_repeat(recommend_list)
      # 获得最终的正向列表
      return recommend_list[::-1]
    else:
      return [u"梁旭磊", u"图灵机器人", u"贤二机器僧"]

    cursor.close()
    conn.close()


if __name__ == '__main__':
  print recommend_persons(textin = u"无人机失控了怎么办")

