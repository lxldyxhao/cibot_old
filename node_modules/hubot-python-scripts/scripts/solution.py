# coding=utf-8
from scripts.hubot_script import *
import pymysql
import json
import traceback
import logging
import re

# 通过下面的方式进行简单配置输出方式与日志级别
logging.basicConfig(filename='logger2.log', level=logging.INFO,
                    format="%(asctime)s %(filename)s %(lineno)d %(message)s",
                    datefmt="%a %d %b %Y %H:%M:%S")


# from   import python_dispatch


class Solution(HubotScript):
  @hear(u'^解答([0-9]+)：([\s\S]+)$')  # 1.监听对话
  def answer(self, message, matches):
    config = {
      'host': 'localhost',
      'port': 3306,
      'user': 'root',
      'password': 'password',
      'db': 'hubot',
      'charset': 'utf8mb4',
      'cursorclass': pymysql.cursors.DictCursor,
    }
    conn = pymysql.connect(**config)
    cursor = conn.cursor()

    try:
      search = re.search('^[\s]+$', matches[1], re.IGNORECASE)
      if search:
        logging.error('#1')
        message['message'] = u"抱歉，解答内容不能为空哟~"
        content = json.dumps(message)
        return "-1&&" + content
      else:
        logging.error('#2')

        ###############################################################################
        # 后面你可以加上, 防止恶意
        # 查找 问题的题主的 username
        # if username <> message['user']['name']:  # 判断 不是自己提问自己回答
        ###############################################################################




        # 2.查找语料库,该题号的问题是否存在,并且还没被回答,并取得问题信息
        value = (int(matches[0]))
        cursor.execute('select request,content from issue where id = %s and status = 0', value)
        conn.commit()
        result = cursor.fetchone()
        if result is not None:
          logging.error('#3')
          request = result['request']
          issue_content = result['content']
          value = [request]
          cursor.execute('select UserName from contact where NickName = %s', value)
          conn.commit()
          result = cursor.fetchone()
          if result is not None:
            logging.error('#4')
            poster_username = result['UserName']

            # 3.添加到解决方案库
            value = [message['user']['name']]
            cursor.execute('select NickName from contact where UserName = %s', value)
            conn.commit()
            result = cursor.fetchone()
            if result is not None:
              logging.error('#5')
              answer_nickname = result['NickName']
              value = (int(matches[0]), answer_nickname, matches[1])
              cursor.execute('INSERT INTO solution (issueid,response,content) VALUES (%s,%s,%s)', value)
              conn.commit()
              new_id = str(cursor.lastrowid)
              # 统计当前有多少条该问题的答案 且为 初始态
              value = [(int(matches[0]))]
              cursor.execute('select * from solution where issueid = %s', value)
              conn.commit()
              result = cursor.fetchall()
              if result is not None:
                logging.error('#6')
                size = len(result)
                if size == 1:
                  logging.error('#7')
                  broadcast = u"已经有1个小伙伴做出了解答，再等下哦~"
                  msg1 = {"type": "hear",
                          "message": broadcast,
                          "user": {"room": "", "name": poster_username}
                          }
                  message['message'] = u"棒棒哒~小智已经收到您的答案~"
                  content = json.dumps(message)
                  content1 = json.dumps(msg1)
                  logging.error('#8')
                  return "1&&" + content + "&&" + content1
                elif size >= 2:
                  logging.error('#9')
                  # 答案融合筛选...这里得出的最佳答案都是 最新的答案,需要全部答案从 result中 取

                  if len(result[1]['content']) > len(result[0]['content']):
                    best_answer = result[1]['content']
                    best__nickname = result[1]['response']
                    best_new_id = result[1]['id']
                  else:
                    best_answer = result[0]['content']
                    best__nickname = result[0]['response']
                    best_new_id = result[0]['id']
                  logging.error('#9.9')
                  broadcast = u"已经收到" + str(
                    size) + u"个小伙伴的解答，小智觉得，最好的答案是这个~" + u"\n原问题：" + issue_content + \
                              u"\n回答者：" + best__nickname + u"\n解答" + str(best_new_id) + u"：" + \
                              best_answer + \
                              u"\n\n如果您对该解答满意，请回复：\n满意解答" + str(best_new_id) + u"问题" + \
                              matches[
                                0] + u"\n如果您不满意,请回复：\n" + u"不满意解答" + \
                              str(best_new_id) + u"问题" + \
                              matches[0]
                  logging.error('9.91')

                  # broadcast = u"已经收到" + str(
                  #   size) + u"个朋友的解答，经过小智的整理，最好的答案如下：" + u"\n原问题：" + issue_content + \
                  #             u"\n回答者：" + answer_nickname + u"\n解答#" + new_id + u"：" + \
                  #             matches[1] + \
                  #             u"\n\n如果您对该解答满意，请回复：\n满意解答" + new_id + u"问题" + \
                  #             matches[
                  #               0] + u"\n如果您不满意,请回复：\n" + u"不满意解答" + \
                  #             new_id + u"问题" + \
                  #             matches[0]



                  # broadcast = "Already received " + str(
                  #   size) + " solutions ,by my evaluation ,the best one is following :\nPoster: " + request + "\nissue:" + issue_content + \
                  #             "\nBest Answer: " + answer_nickname + "\nsolution #" + new_id + ":" + \
                  #             matches[1] + \
                  #             "\n\nIf you are happy, please send:\nThanks solution #" + new_id + ",so that issue #" + \
                  #             matches[
                  #               0] + " is closed!" + "\n\nIf you are not happy, please send:" + "Sorry about solution #" + \
                  #             new_id + ",but that issue #" + \
                  #             matches[0] + " is still open! I want refund!"

                  msg1 = {"type": "hear",
                          "message": broadcast,
                          "user": {"room": "", "name": poster_username}
                          }
                  message['message'] = "棒棒哒~小智已经收到您的答案~"
                  content = json.dumps(message)
                  content1 = json.dumps(msg1)
                  logging.error('#10')
                  return "1&&" + content + "&&" + content1
                else:
                  logging.error('#1000')
                  message['message'] = "抱歉，问题已经关闭了哦~\n有没有兴趣问小智一个问题呢？"
                  content = json.dumps(message)
                  return "-1&&" + content



        else:
          logging.error('#11')
          message['message'] = "抱歉，问题已经关闭了哦~\n有没有兴趣问小智一个问题呢？"
          content = json.dumps(message)
          return "-1&&" + content

    except:
      import traceback

      traceback.print_exc()
      # 发生错误时会滚
      conn.rollback()

    finally:  # 关闭游标连接
      cursor.close()
      # 关闭数据库连接
      conn.close()
